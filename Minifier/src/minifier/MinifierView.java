/*
 * MinifierView.java
 */

package minifier;

import com.cypronmaya.Utils.FileDrop;
import com.cypronmaya.yuicompressor.CompressionStatistics;
import com.cypronmaya.yuicompressor.FileType;
import com.cypronmaya.yuicompressor.Minifier;
import java.awt.Component;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.Timer;
import javax.swing.table.*;
/**
 * The application's main frame.
 */
public class MinifierView extends FrameView {

    public MinifierView(SingleFrameApplication app) {
        super(app);
        
        getFrame().setResizable(false);
        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MinifierApp.getApplication().getMainFrame();
            aboutBox = new MinifierAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MinifierApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tree = new javax.swing.JScrollPane();
        fileDrop = new javax.swing.JTree();
        settings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        suffixRadio = new javax.swing.JRadioButton();
        rewriteRadio = new javax.swing.JRadioButton();
        suffix = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nomunge = new javax.swing.JCheckBox();
        preserve_semi = new javax.swing.JCheckBox();
        disable_optimizations = new javax.swing.JCheckBox();
        charsetLabel = new javax.swing.JLabel();
        charset = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        destination = new javax.swing.JComboBox();
        linebr = new javax.swing.JCheckBox();
        lineBreak = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stats = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        compressAllButton = new javax.swing.JButton();
        items = new javax.swing.JLabel();
        plus = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        options = new javax.swing.JPopupMenu();
        Remove = new javax.swing.JMenuItem();
        Combine = new javax.swing.JMenuItem();
        Compress = new javax.swing.JMenuItem();
        buttonGroup = new javax.swing.ButtonGroup();

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(1000, 370));

        tree.setName("tree"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("files");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("sad");
        treeNode1.add(treeNode2);
        fileDrop.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        fileDrop.setCellRenderer(new MyRenderer());
        fileDrop.setName("fileDrop"); // NOI18N
        fileDrop.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                fileDropValueChanged(evt);
            }
        });
        tree.setViewportView(fileDrop);
        rootNode = new DefaultMutableTreeNode("files");
        defaultTreeModel  = new DefaultTreeModel( rootNode );
        fileDrop.setModel(defaultTreeModel);

        cssSet = new HashSet<String>();
        jsSet = new HashSet<String>();
        totalSet = new HashSet<String>();

        new FileDrop( fileDrop, new FileDrop.Listener()
            {   public void filesDropped( java.io.File[] files )
                {
                    for( int i = 0; i < files.length; i++ )
                    {   try
                        {
                            String filePath=files[i].getCanonicalPath();
                            String type=filePath.substring(filePath.lastIndexOf('.')+1);
                            boolean isCSS=    type.equalsIgnoreCase("css");
                            boolean isJS=     type.equalsIgnoreCase("js");

                            if(isCSS)
                            {
                                cssSet.add(filePath);
                            }else if(isJS)
                            {
                                jsSet.add(filePath);
                            }
                            if(((isCSS || isJS) && !totalSet.contains(filePath))|| files[i].isDirectory())
                            {
                                defaultTreeModel.insertNodeInto(  new DefaultMutableTreeNode(filePath), rootNode, rootNode.getChildCount());
                                totalSet.add(filePath);
                            }
                            else
                            {
                                System.out.println("Duplicate");
                            }
                        }   // end try
                        catch( java.io.IOException e ) {}
                        fileDrop.expandRow(0);
                        items.setText("         "+totalSet.size()+" Items");
                        //   System.out.println("Root ---> "+((DefaultTreeModel)fileDrop.getModel()).getRoot());
                        //     fileDrop.setRootVisible(false);

                        //       fileDrop.setCellRenderer(new MyRenderer());
                    }   // end for: through each dropped file
                }   // end filesDropped
            }); // end FileDrop.Listener

            settings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            settings.setName("settings"); // NOI18N

            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(minifier.MinifierApp.class).getContext().getResourceMap(MinifierView.class);
            jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
            jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
            jLabel1.setName("jLabel1"); // NOI18N

            jLabel2.setIcon(resourceMap.getIcon("jLabel2.icon")); // NOI18N
            jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
            jLabel2.setName("jLabel2"); // NOI18N

            buttonGroup.add(suffixRadio);
            suffixRadio.setSelected(true);
            suffixRadio.setText(resourceMap.getString("suffixRadio.text")); // NOI18N
            suffixRadio.setName("suffixRadio"); // NOI18N
            suffixRadio.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    suffixRadioActionPerformed(evt);
                }
            });

            buttonGroup.add(rewriteRadio);
            rewriteRadio.setText(resourceMap.getString("rewriteRadio.text")); // NOI18N
            rewriteRadio.setName("rewriteRadio"); // NOI18N
            rewriteRadio.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    rewriteRadioActionPerformed(evt);
                }
            });

            suffix.setText(resourceMap.getString("suffix.text")); // NOI18N
            suffix.setName("suffix"); // NOI18N
            suffix.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    suffixKeyReleased(evt);
                }
            });

            jLabel3.setIcon(resourceMap.getIcon("jLabel3.icon")); // NOI18N
            jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
            jLabel3.setName("jLabel3"); // NOI18N

            nomunge.setText(resourceMap.getString("nomunge.text")); // NOI18N
            nomunge.setName("nomunge"); // NOI18N
            nomunge.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    nomungeActionPerformed(evt);
                }
            });

            preserve_semi.setSelected(true);
            preserve_semi.setText(resourceMap.getString("preserve_semi.text")); // NOI18N
            preserve_semi.setName("preserve_semi"); // NOI18N
            preserve_semi.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    preserve_semiActionPerformed(evt);
                }
            });

            disable_optimizations.setSelected(true);
            disable_optimizations.setText(resourceMap.getString("disable_optimizations.text")); // NOI18N
            disable_optimizations.setName("disable_optimizations"); // NOI18N
            disable_optimizations.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    disable_optimizationsActionPerformed(evt);
                }
            });

            charsetLabel.setIcon(resourceMap.getIcon("charsetLabel.icon")); // NOI18N
            charsetLabel.setText(resourceMap.getString("charsetLabel.text")); // NOI18N
            charsetLabel.setName("charsetLabel"); // NOI18N

            charset.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UTF-8", "ISO-8859-1" }));
            charset.setName("charset"); // NOI18N
            charset.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    charsetItemStateChanged(evt);
                }
            });

            jLabel4.setIcon(resourceMap.getIcon("jLabel4.icon")); // NOI18N
            jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
            jLabel4.setName("jLabel4"); // NOI18N

            destination.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Source folder", "Destination folder" }));
            destination.setName("destination"); // NOI18N
            destination.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    destinationActionPerformed(evt);
                }
            });

            linebr.setText(resourceMap.getString("linebr.text")); // NOI18N
            linebr.setName("linebr"); // NOI18N
            linebr.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    linebrActionPerformed(evt);
                }
            });

            lineBreak.setText(resourceMap.getString("lineBreak.text")); // NOI18N
            lineBreak.setName("lineBreak"); // NOI18N
            lineBreak.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    lineBreakKeyReleased(evt);
                }
            });

            jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
            jLabel6.setName("jLabel6"); // NOI18N

            jLabel7.setIcon(resourceMap.getIcon("jLabel7.icon")); // NOI18N
            jLabel7.setName("jLabel7"); // NOI18N

            javax.swing.GroupLayout settingsLayout = new javax.swing.GroupLayout(settings);
            settings.setLayout(settingsLayout);
            settingsLayout.setHorizontalGroup(
                settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(settingsLayout.createSequentialGroup()
                    .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(settingsLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(settingsLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(settingsLayout.createSequentialGroup()
                                            .addComponent(charsetLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(charset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(settingsLayout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(rewriteRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(settingsLayout.createSequentialGroup()
                                                    .addComponent(suffixRadio)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(suffix, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(settingsLayout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(linebr)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lineBreak, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel6))
                                        .addComponent(jLabel4)
                                        .addGroup(settingsLayout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(settingsLayout.createSequentialGroup()
                                    .addGap(104, 104, 104)
                                    .addComponent(jLabel1))))
                        .addGroup(settingsLayout.createSequentialGroup()
                            .addGap(95, 95, 95)
                            .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nomunge, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(preserve_semi)
                                    .addComponent(disable_optimizations)))))
                    .addGap(14, 14, 14))
            );
            settingsLayout.setVerticalGroup(
                settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(settingsLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addGap(18, 18, 18)
                    .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(settingsLayout.createSequentialGroup()
                            .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(suffixRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(suffix, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rewriteRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(charsetLabel)
                        .addComponent(charset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(nomunge, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(preserve_semi, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(disable_optimizations, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(linebr)
                        .addComponent(lineBreak, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE))
            );

            lineBreak.setEnabled(false);

            jLabel5.setIcon(resourceMap.getIcon("jLabel5.icon")); // NOI18N
            jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
            jLabel5.setName("jLabel5"); // NOI18N

            jScrollPane2.setName("jScrollPane2"); // NOI18N

            stats.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "inFile", "outFile", "From (KB)", "To (KB)", "%"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            stats.setColumnSelectionAllowed(true);
            stats.setName("stats"); // NOI18N
            jScrollPane2.setViewportView(stats);

            jScrollPane1.setName("jScrollPane1"); // NOI18N

            log.setColumns(20);
            log.setRows(5);
            log.setName("log"); // NOI18N
            jScrollPane1.setViewportView(log);

            javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addComponent(tree, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(jLabel5)
                            .addGap(303, 303, 303))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(settings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tree, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            menuBar.setName("menuBar"); // NOI18N

            fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
            fileMenu.setName("fileMenu"); // NOI18N

            javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(minifier.MinifierApp.class).getContext().getActionMap(MinifierView.class, this);
            exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
            exitMenuItem.setIcon(resourceMap.getIcon("exitMenuItem.icon")); // NOI18N
            exitMenuItem.setName("exitMenuItem"); // NOI18N
            fileMenu.add(exitMenuItem);

            menuBar.add(fileMenu);

            helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
            helpMenu.setName("helpMenu"); // NOI18N

            aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
            aboutMenuItem.setIcon(resourceMap.getIcon("aboutMenuItem.icon")); // NOI18N
            aboutMenuItem.setName("aboutMenuItem"); // NOI18N
            helpMenu.add(aboutMenuItem);

            menuBar.add(helpMenu);

            statusPanel.setName("statusPanel"); // NOI18N
            statusPanel.setPreferredSize(new java.awt.Dimension(980, 25));

            statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

            statusMessageLabel.setName("statusMessageLabel"); // NOI18N

            statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

            clearButton.setIcon(resourceMap.getIcon("clearButton.icon")); // NOI18N
            clearButton.setText(resourceMap.getString("clearButton.text")); // NOI18N
            clearButton.setName("clearButton"); // NOI18N
            clearButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    clearButtonActionPerformed(evt);
                }
            });

            compressAllButton.setIcon(resourceMap.getIcon("compressAllButton.icon")); // NOI18N
            compressAllButton.setText(resourceMap.getString("compressAllButton.text")); // NOI18N
            compressAllButton.setName("compressAllButton"); // NOI18N
            compressAllButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    compressAllButtonActionPerformed(evt);
                }
            });

            items.setText(resourceMap.getString("items.text")); // NOI18N
            items.setName("items"); // NOI18N

            plus.setIcon(resourceMap.getIcon("plus.icon")); // NOI18N
            plus.setName("plus"); // NOI18N

            minus.setIcon(resourceMap.getIcon("minus.icon")); // NOI18N
            minus.setName("minus"); // NOI18N

            progressBar.setName("progressBar"); // NOI18N

            javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
            statusPanel.setLayout(statusPanelLayout);
            statusPanelLayout.setHorizontalGroup(
                statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(statusPanelLayout.createSequentialGroup()
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addGap(109, 109, 109)
                            .addComponent(statusMessageLabel)
                            .addGap(579, 579, 579)
                            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                            .addGap(463, 463, 463)
                            .addComponent(statusAnimationLabel))
                        .addGroup(statusPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8)
                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(items)
                            .addGap(16, 16, 16)
                            .addComponent(clearButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(compressAllButton)
                            .addGap(470, 470, 470)
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            statusPanelLayout.setVerticalGroup(
                statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(items, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(minus, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addComponent(plus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(37, 37, 37)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(statusMessageLabel)
                        .addComponent(statusAnimationLabel))
                    .addContainerGap())
            );

            plus.setEnabled(false);
            minus.setEnabled(false);

            options.setName("options"); // NOI18N

            Remove.setText(resourceMap.getString("Remove.text")); // NOI18N
            Remove.setName("Remove"); // NOI18N
            Remove.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    RemoveActionPerformed(evt);
                }
            });
            options.add(Remove);

            Combine.setText(resourceMap.getString("Combine.text")); // NOI18N
            Combine.setName("Combine"); // NOI18N
            Combine.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    CombineActionPerformed(evt);
                }
            });
            options.add(Combine);
            Combine.setVisible(false);

            Compress.setText(resourceMap.getString("Compress.text")); // NOI18N
            Compress.setName("Compress"); // NOI18N
            Compress.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    CompressActionPerformed(evt);
                }
            });
            options.add(Compress);

            setComponent(mainPanel);
            setMenuBar(menuBar);
            setStatusBar(statusPanel);
        }// </editor-fold>//GEN-END:initComponents

    private void fileDropValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_fileDropValueChanged
        
        fileDrop.addMouseListener(new MouseAdapter() {

            public void mouseReleased(MouseEvent Me) {
                if (Me.isPopupTrigger()) {
                    /*
                     * Combine button
                    if (fileDrop.getSelectionRows().length >= 2) {
                        Combine.setVisible(true);
                    } else {
                        Combine.setVisible(false);
                    }
                     */

                    options.show((Component) Me.getSource(), Me.getX(), Me.getY());
                }
            }
        });

    }//GEN-LAST:event_fileDropValueChanged
    private void expand(JTree tree, TreePath path) {
        TreeNode node = (TreeNode) path.getLastPathComponent();
        if (node.getChildCount() > 0) {
            Enumeration e = node.children();
            while (e.hasMoreElements()) {
                TreeNode n = (TreeNode) e.nextElement();
                expand(tree, path.pathByAddingChild(n));
            }
        }
        tree.expandPath(path);
    }

    private void suffixRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suffixRadioActionPerformed
          suffix.setEditable(true);
        comp.setCssSuffix(suffix.getText() + ".css");
        comp.setJsSuffix(suffix.getText() + ".js");
        comp.setUseSuffix(true);
        System.out.println("Suffix changed to " + suffix.getText());
    }//GEN-LAST:event_suffixRadioActionPerformed

    private void rewriteRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewriteRadioActionPerformed
       suffix.setEditable(false);
        comp.setCssSuffix(".css");
        comp.setJsSuffix(".js");
        comp.setUseSuffix(false);
        System.out.println("Suffix changed to .css|js");
    }//GEN-LAST:event_rewriteRadioActionPerformed

    private void suffixKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suffixKeyReleased
        comp.setCssSuffix(suffix.getText() + ".css");
        comp.setJsSuffix(suffix.getText() + ".js");
        System.out.println("Suffix changed to " + suffix.getText());
    }//GEN-LAST:event_suffixKeyReleased

    private void nomungeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomungeActionPerformed
          if (nomunge.isSelected()) {
            comp.setMunge(true);
            System.out.println("Option munge : " + true);
        } else {
            comp.setMunge(false);
            System.out.println("Option munge : " + false);
        }
    }//GEN-LAST:event_nomungeActionPerformed

    private void preserve_semiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preserve_semiActionPerformed
        if (preserve_semi.isSelected()) {
            comp.setPreserveAllSemiColons(true);
            System.out.println("Option preserveAllSemiColons : " + true);
        } else {
            comp.setPreserveAllSemiColons(false);
            System.out.println("Option preserveAllSemiColons : " + false);
        }
    }//GEN-LAST:event_preserve_semiActionPerformed

    private void disable_optimizationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disable_optimizationsActionPerformed
       if (disable_optimizations.isSelected()) {
            comp.setOptimize(true);
            System.out.println("Option Optimize : " + true);
        } else {
            comp.setOptimize(false);
            System.out.println("Option Optimize : " + false);
        }
    }//GEN-LAST:event_disable_optimizationsActionPerformed

    private void charsetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_charsetItemStateChanged
       comp.setCharset(charset.getSelectedItem().toString());
        System.out.println("Option charset " + charset.getSelectedItem().toString());
    
    }//GEN-LAST:event_charsetItemStateChanged

    private void destinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationActionPerformed
       if (destination.getSelectedIndex() == 1) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Destination folder");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //
            // disable the "All files" option.
            //
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
                System.out.println("Selected Directory : "
                        + chooser.getSelectedFile());
                destination.removeItemAt(1);
                destination.addItem(chooser.getSelectedFile());
                destination.setSelectedIndex(1);
                comp.setUseOutDir(true);
                comp.setOutDir(chooser.getSelectedFile());
            } else {
                destination.removeItemAt(1);
                destination.addItem("Destination folder");
                destination.setSelectedIndex(0);
                comp.setUseOutDir(false);
                comp.setOutDir(null);
                System.out.println("No Selection ");
            }
        }
    }//GEN-LAST:event_destinationActionPerformed

    private void linebrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linebrActionPerformed
          if (linebr.isSelected()) {
            lineBreak.setEnabled(true);
            comp.setLineBreakPosition(Integer.parseInt(lineBreak.getText()));
        } else {
            lineBreak.setEnabled(false);
            comp.setLineBreakPosition(-1);
        }
    }//GEN-LAST:event_linebrActionPerformed

    private void lineBreakKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineBreakKeyReleased
         comp.setLineBreakPosition(Integer.parseInt(lineBreak.getText()));
    }//GEN-LAST:event_lineBreakKeyReleased

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
              removeAllChildren(rootNode);
        totalSet.clear();
        items_update();

    }//GEN-LAST:event_clearButtonActionPerformed

    private void compressAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressAllButtonActionPerformed
        int x = rootNode.getChildCount();
        if (x != 0) {
            comp_stats = new CompressionStatistics();
            while (x-- > 0) {
                System.out.println("------------------------------------------" + x);

                // File in = new File(rootNode.getChildAt(x).toString());
                System.out.println(rootNode.getChildAt(x).toString());
                File in = new File(rootNode.getChildAt(x).toString());
                if (in.isFile()) {
                    process(in);
                } else if (in.isDirectory()) {
                    process_dir(in);
                }
            }
            clearButtonActionPerformed(null);
        }
    }//GEN-LAST:event_compressAllButtonActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        for (TreePath currentSelection : fileDrop.getSelectionPaths()) {
            if (currentSelection != null) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
                DefaultTreeModel model = ((DefaultTreeModel) fileDrop.getModel());
                if (!node.isRoot()) {
                    model.removeNodeFromParent(node);
                }
                //  model.nodeStructureChanged(rootNode);
                totalSet.remove(node.toString());
            }
        }
        items_update();
        System.out.println("Removed files");
    }//GEN-LAST:event_RemoveActionPerformed

    private void CombineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CombineActionPerformed
         System.out.println("Combine files");
        for (TreePath currentSelection : fileDrop.getSelectionPaths()) {
            if (currentSelection != null) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
                System.out.println(node.toString());
            }
        }
        items.setText("         " + totalSet.size() + " Items");
    }//GEN-LAST:event_CombineActionPerformed
    public DefaultMutableTreeNode removeAllChildren(DefaultMutableTreeNode rootNode) {
        while (rootNode.getChildCount() > 0) {
            DefaultMutableTreeNode t = (DefaultMutableTreeNode) rootNode.getChildAt(0);
            ((DefaultTreeModel) fileDrop.getModel()).removeNodeFromParent(t);
        }
        return rootNode;
    }
    private void CompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompressActionPerformed
         comp_stats = new CompressionStatistics();
        for (TreePath currentSelection : fileDrop.getSelectionPaths()) {
            if (currentSelection != null) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
                File in = new File(node.toString());
                if (in.isFile()) {
                    process(in);
                } else {
                    process_dir(in);
                }
                DefaultTreeModel model = ((DefaultTreeModel) fileDrop.getModel());
                if (!node.isRoot()) {
                    model.removeNodeFromParent(node);
                }
                //  model.nodeStructureChanged(rootNode);
                totalSet.remove(node.toString());
            }
        }
        items_update();
    }//GEN-LAST:event_CompressActionPerformed
private void log(String str) {
        log.append(str + "\n");
    }

    private void items_update() {
        items.setText("         " + totalSet.size() + " Items");
    }

    private void process_dir(File dir) {
        if (dir.isDirectory()) {
            for (File file : dir.listFiles(js_css_filefilter)) {
                process(file);
            }
        }
    }

    private void log_update(String str) {
        log(str);
        log(comp_stats.getJsStats());
        log(comp_stats.getCssStats());
        log(comp_stats.getTotalStats());
    }

    private void process(File in) {
        Long fromBytes = in.length();
        Long toBytes = 0L;
        int percentage = 0;
        DefaultTableModel dtm = (DefaultTableModel) stats.getModel();
        File outFile = comp.process(in);
        toBytes = outFile.length();
        String fileName = in.getName();
        String fileType = fileName.substring(fileName.lastIndexOf('.') + 1);
        percentage = (int) Math.floor((double) toBytes / (double) fromBytes * 100);
        dtm.insertRow(stats.getRowCount(), new Object[]{fileName, outFile.getName(), fromBytes, toBytes, percentage});
        comp_stats.getFileStats(in, outFile, FileType.getFileType(fileName));
        log_update(comp.getSb().toString());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Combine;
    private javax.swing.JMenuItem Compress;
    private javax.swing.JMenuItem Remove;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JComboBox charset;
    private javax.swing.JLabel charsetLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton compressAllButton;
    private javax.swing.JComboBox destination;
    private javax.swing.JCheckBox disable_optimizations;
    private javax.swing.JTree fileDrop;
    private javax.swing.tree.DefaultMutableTreeNode rootNode;
    private javax.swing.tree.DefaultTreeModel defaultTreeModel;
    private java.util.Set<String> cssSet;
    private java.util.Set<String> jsSet;
    private java.util.Set<String> totalSet;
    private javax.swing.JLabel items;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lineBreak;
    private javax.swing.JCheckBox linebr;
    private javax.swing.JTextArea log;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton minus;
    private javax.swing.JCheckBox nomunge;
    private javax.swing.JPopupMenu options;
    private javax.swing.JButton plus;
    private javax.swing.JCheckBox preserve_semi;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rewriteRadio;
    private javax.swing.JPanel settings;
    private javax.swing.JTable stats;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField suffix;
    private javax.swing.JRadioButton suffixRadio;
    private javax.swing.JScrollPane tree;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
        private Minifier comp = new Minifier();
    private CompressionStatistics comp_stats = new CompressionStatistics();
    private FilenameFilter js_css_filefilter = new FilenameFilter() {

        public boolean accept(File dir, String name) {
            return name.endsWith(".js") || name.endsWith(".css");
        }
    };
}


class MyRenderer extends DefaultTreeCellRenderer {

    private JLabel label;
    private Icon CSSicon = new ImageIcon(getClass().getResource("/minifier/resources/css.png"));
    private Icon JSicon = new ImageIcon(getClass().getResource("/minifier/resources/script.png"));
    private Icon folderIcon = new ImageIcon(getClass().getResource("/minifier/resources/folder.png"));
    private Icon filesIcon = new ImageIcon(getClass().getResource("/minifier/resources/page_white_stack.png"));

    public MyRenderer() {
        label = new JLabel();
    }

    public Component getTreeCellRendererComponent(
            JTree tree,
            Object value,
            boolean sel,
            boolean expanded,
            boolean leaf,
            int row,
            boolean hasFocus) {

        super.getTreeCellRendererComponent(
                tree, value, sel,
                expanded, leaf, row,
                hasFocus);
        if (leaf) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            Object obj = (node).getUserObject();
            String filePath = obj.toString();
            String type = filePath.substring(filePath.lastIndexOf('.') + 1);
            if (type.equalsIgnoreCase("js")) {
                setIcon(JSicon);
            } else if (type.equalsIgnoreCase("css")) {
                setIcon(CSSicon);
            } else {
                setIcon(folderIcon);
            }
        } else {
            setIcon(filesIcon);
        }

        return this;
    }
}
